-- Enable Row Level Security on all tables\nALTER TABLE public.user_profiles ENABLE ROW LEVEL SECURITY;\nALTER TABLE public.trading_bots ENABLE ROW LEVEL SECURITY;\nALTER TABLE public.opportunities ENABLE ROW LEVEL SECURITY;\nALTER TABLE public.user_favorites ENABLE ROW LEVEL SECURITY;\nALTER TABLE public.user_wallets ENABLE ROW LEVEL SECURITY;\nALTER TABLE public.activities ENABLE ROW LEVEL SECURITY;\nALTER TABLE public.user_settings ENABLE ROW LEVEL SECURITY;\nALTER TABLE public.trades ENABLE ROW LEVEL SECURITY;\nALTER TABLE public.portfolio_snapshots ENABLE ROW LEVEL SECURITY;\nALTER TABLE public.price_feeds ENABLE ROW LEVEL SECURITY;\n\n-- User Profiles Policies\nCREATE POLICY \"Users can view own profile\" ON user_profiles\n    FOR SELECT USING (auth.uid() = id);\n\nCREATE POLICY \"Users can update own profile\" ON user_profiles\n    FOR UPDATE USING (auth.uid() = id);\n\nCREATE POLICY \"Users can insert own profile\" ON user_profiles\n    FOR INSERT WITH CHECK (auth.uid() = id);\n\n-- Trading Bots Policies\nCREATE POLICY \"Users can view own bots\" ON trading_bots\n    FOR SELECT USING (auth.uid() = user_id);\n\nCREATE POLICY \"Users can create own bots\" ON trading_bots\n    FOR INSERT WITH CHECK (auth.uid() = user_id);\n\nCREATE POLICY \"Users can update own bots\" ON trading_bots\n    FOR UPDATE USING (auth.uid() = user_id);\n\nCREATE POLICY \"Users can delete own bots\" ON trading_bots\n    FOR DELETE USING (auth.uid() = user_id);\n\n-- Opportunities Policies (public read, system write)\nCREATE POLICY \"Everyone can view opportunities\" ON opportunities\n    FOR SELECT USING (TRUE);\n\n-- Allow system/admin to insert/update opportunities (for now, we'll use service role)\n-- In production, you might want to restrict this further\n\n-- User Favorites Policies\nCREATE POLICY \"Users can view own favorites\" ON user_favorites\n    FOR SELECT USING (auth.uid() = user_id);\n\nCREATE POLICY \"Users can manage own favorites\" ON user_favorites\n    FOR ALL USING (auth.uid() = user_id);\n\n-- User Wallets Policies\nCREATE POLICY \"Users can view own wallets\" ON user_wallets\n    FOR SELECT USING (auth.uid() = user_id);\n\nCREATE POLICY \"Users can manage own wallets\" ON user_wallets\n    FOR ALL USING (auth.uid() = user_id);\n\n-- Activities Policies\nCREATE POLICY \"Users can view own activities\" ON activities\n    FOR SELECT USING (auth.uid() = user_id);\n\nCREATE POLICY \"Users can create activities\" ON activities\n    FOR INSERT WITH CHECK (auth.uid() = user_id);\n\n-- User Settings Policies\nCREATE POLICY \"Users can view own settings\" ON user_settings\n    FOR SELECT USING (auth.uid() = user_id);\n\nCREATE POLICY \"Users can manage own settings\" ON user_settings\n    FOR ALL USING (auth.uid() = user_id);\n\n-- Trades Policies\nCREATE POLICY \"Users can view own trades\" ON trades\n    FOR SELECT USING (auth.uid() = user_id);\n\nCREATE POLICY \"Users can create trades\" ON trades\n    FOR INSERT WITH CHECK (auth.uid() = user_id);\n\nCREATE POLICY \"Users can update own trades\" ON trades\n    FOR UPDATE USING (auth.uid() = user_id);\n\n-- Portfolio Snapshots Policies\nCREATE POLICY \"Users can view own portfolio snapshots\" ON portfolio_snapshots\n    FOR SELECT USING (auth.uid() = user_id);\n\nCREATE POLICY \"Users can create portfolio snapshots\" ON portfolio_snapshots\n    FOR INSERT WITH CHECK (auth.uid() = user_id);\n\n-- Price Feeds Policies (public read)\nCREATE POLICY \"Everyone can view price feeds\" ON price_feeds\n    FOR SELECT USING (TRUE);\n\n-- Function to handle new user registration\nCREATE OR REPLACE FUNCTION public.handle_new_user()\nRETURNS TRIGGER AS $$\nBEGIN\n    INSERT INTO public.user_profiles (id, email, display_name)\n    VALUES (NEW.id, NEW.email, COALESCE(NEW.raw_user_meta_data->>'display_name', split_part(NEW.email, '@', 1)));\n    \n    -- Create default settings\n    INSERT INTO public.user_settings (user_id, profile, trading, notifications, security, appearance)\n    VALUES (\n        NEW.id,\n        jsonb_build_object(\n            'displayName', COALESCE(NEW.raw_user_meta_data->>'display_name', split_part(NEW.email, '@', 1)),\n            'email', NEW.email,\n            'timezone', 'UTC',\n            'language', 'en'\n        ),\n        jsonb_build_object(\n            'defaultSlippage', 1.0,\n            'maxGasPrice', 50,\n            'autoExecuteLimit', 1000,\n            'riskTolerance', 'medium',\n            'enableMEV', false,\n            'preferredChains', array['Ethereum', 'Polygon', 'Arbitrum']\n        ),\n        jsonb_build_object(\n            'email', true,\n            'push', true,\n            'sms', false,\n            'opportunities', true,\n            'botActions', true,\n            'priceAlerts', false,\n            'failedTrades', true\n        ),\n        jsonb_build_object(\n            'twoFactorEnabled', false,\n            'sessionTimeout', 24,\n            'apiKeysEnabled', false,\n            'whitelistedIPs', array[]::text[]\n        ),\n        jsonb_build_object(\n            'theme', 'dark',\n            'currency', 'USD',\n            'hideBalances', false,\n            'compactMode', false\n        )\n    );\n    \n    RETURN NEW;\nEND;\n$$ LANGUAGE plpgsql SECURITY DEFINER;\n\n-- Trigger for new user registration\nCREATE TRIGGER on_auth_user_created\n    AFTER INSERT ON auth.users\n    FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();