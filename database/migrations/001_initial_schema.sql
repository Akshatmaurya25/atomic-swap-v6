-- Enable UUID extension\nCREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";\n\n-- Enable Row Level Security\nALTER DEFAULT PRIVILEGES REVOKE EXECUTE ON FUNCTIONS FROM PUBLIC;\n\n-- Create user profiles table (extends Supabase auth.users)\nCREATE TABLE public.user_profiles (\n    id UUID REFERENCES auth.users(id) PRIMARY KEY,\n    email TEXT,\n    display_name TEXT,\n    avatar_url TEXT,\n    is_premium BOOLEAN DEFAULT FALSE,\n    subscription_tier TEXT DEFAULT 'free' CHECK (subscription_tier IN ('free', 'pro', 'enterprise')),\n    total_trades INTEGER DEFAULT 0,\n    total_profit DECIMAL(20, 8) DEFAULT 0,\n    joined_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    last_active TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    settings JSONB DEFAULT '{}'\n);\n\n-- Create trading bots table\nCREATE TABLE public.trading_bots (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,\n    name TEXT NOT NULL,\n    strategy TEXT NOT NULL CHECK (strategy IN ('arbitrage', 'dca', 'grid')),\n    status TEXT DEFAULT 'stopped' CHECK (status IN ('active', 'paused', 'stopped')),\n    pairs TEXT[] DEFAULT '{}',\n    chains TEXT[] DEFAULT '{}',\n    settings JSONB DEFAULT '{}',\n    performance JSONB DEFAULT '{}',\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Create arbitrage opportunities table\nCREATE TABLE public.opportunities (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    token_pair TEXT NOT NULL,\n    source_chain TEXT NOT NULL,\n    target_chain TEXT NOT NULL,\n    source_platform TEXT NOT NULL,\n    target_platform TEXT NOT NULL,\n    source_price DECIMAL(20, 8) NOT NULL,\n    target_price DECIMAL(20, 8) NOT NULL,\n    potential_profit DECIMAL(20, 8) NOT NULL,\n    profit_percentage DECIMAL(8, 4) NOT NULL,\n    liquidity DECIMAL(20, 8) NOT NULL,\n    estimated_gas DECIMAL(20, 8) NOT NULL,\n    time_window INTEGER NOT NULL, -- in seconds\n    risk TEXT DEFAULT 'medium' CHECK (risk IN ('low', 'medium', 'high')),\n    trending BOOLEAN DEFAULT FALSE,\n    executable BOOLEAN DEFAULT TRUE,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    expires_at TIMESTAMP WITH TIME ZONE\n);\n\n-- Create user favorites table\nCREATE TABLE public.user_favorites (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,\n    opportunity_id UUID REFERENCES opportunities(id) ON DELETE CASCADE NOT NULL,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    UNIQUE(user_id, opportunity_id)\n);\n\n-- Create user wallets table\nCREATE TABLE public.user_wallets (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,\n    address TEXT NOT NULL,\n    name TEXT NOT NULL,\n    chain TEXT NOT NULL,\n    assets JSONB DEFAULT '{}',\n    total_value DECIMAL(20, 8) DEFAULT 0,\n    performance JSONB DEFAULT '{}',\n    is_primary BOOLEAN DEFAULT FALSE,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    UNIQUE(user_id, address, chain)\n);\n\n-- Create activities table for tracking user actions\nCREATE TABLE public.activities (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,\n    type TEXT NOT NULL CHECK (type IN (\n        'arbitrage', 'deposit', 'withdrawal', 'bot_start', 'bot_stop', \n        'trade', 'bot_action', 'wallet_connect', 'wallet_disconnect'\n    )),\n    status TEXT NOT NULL CHECK (status IN ('pending', 'completed', 'failed')),\n    description TEXT NOT NULL,\n    details JSONB DEFAULT '{}',\n    amount DECIMAL(20, 8),\n    currency TEXT,\n    transaction_hash TEXT,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Create user settings table\nCREATE TABLE public.user_settings (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE UNIQUE NOT NULL,\n    profile JSONB DEFAULT '{}',\n    trading JSONB DEFAULT '{}',\n    notifications JSONB DEFAULT '{}',\n    security JSONB DEFAULT '{}',\n    appearance JSONB DEFAULT '{}',\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Create trades table for executed trades\nCREATE TABLE public.trades (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,\n    bot_id UUID REFERENCES trading_bots(id) ON DELETE SET NULL,\n    opportunity_id UUID REFERENCES opportunities(id) ON DELETE SET NULL,\n    type TEXT NOT NULL CHECK (type IN ('arbitrage', 'spot', 'swap')),\n    status TEXT NOT NULL CHECK (status IN ('pending', 'executed', 'failed', 'cancelled')),\n    pair TEXT NOT NULL,\n    source_chain TEXT NOT NULL,\n    target_chain TEXT,\n    amount_in DECIMAL(20, 8) NOT NULL,\n    amount_out DECIMAL(20, 8),\n    expected_profit DECIMAL(20, 8),\n    actual_profit DECIMAL(20, 8),\n    gas_used DECIMAL(20, 8),\n    source_tx_hash TEXT,\n    target_tx_hash TEXT,\n    executed_at TIMESTAMP WITH TIME ZONE,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    details JSONB DEFAULT '{}'\n);\n\n-- Create portfolio snapshots table for tracking performance over time\nCREATE TABLE public.portfolio_snapshots (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE NOT NULL,\n    total_value DECIMAL(20, 8) NOT NULL,\n    assets JSONB NOT NULL DEFAULT '{}',\n    profit_loss DECIMAL(20, 8) DEFAULT 0,\n    profit_loss_percentage DECIMAL(8, 4) DEFAULT 0,\n    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\n\n-- Create price feeds table for storing historical price data\nCREATE TABLE public.price_feeds (\n    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),\n    token_pair TEXT NOT NULL,\n    chain TEXT NOT NULL,\n    platform TEXT NOT NULL,\n    price DECIMAL(20, 8) NOT NULL,\n    volume_24h DECIMAL(20, 8),\n    liquidity DECIMAL(20, 8),\n    timestamp TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n    UNIQUE(token_pair, chain, platform, timestamp)\n);\n\n-- Create indexes for better performance\nCREATE INDEX idx_trading_bots_user_id ON trading_bots(user_id);\nCREATE INDEX idx_trading_bots_status ON trading_bots(status);\nCREATE INDEX idx_opportunities_profit ON opportunities(profit_percentage DESC);\nCREATE INDEX idx_opportunities_created ON opportunities(created_at DESC);\nCREATE INDEX idx_opportunities_executable ON opportunities(executable) WHERE executable = TRUE;\nCREATE INDEX idx_user_favorites_user_id ON user_favorites(user_id);\nCREATE INDEX idx_activities_user_id_created ON activities(user_id, created_at DESC);\nCREATE INDEX idx_trades_user_id_created ON trades(user_id, created_at DESC);\nCREATE INDEX idx_trades_status ON trades(status);\nCREATE INDEX idx_portfolio_snapshots_user_created ON portfolio_snapshots(user_id, created_at DESC);\nCREATE INDEX idx_price_feeds_token_timestamp ON price_feeds(token_pair, timestamp DESC);\n\n-- Create updated_at trigger function\nCREATE OR REPLACE FUNCTION public.update_updated_at_column()\nRETURNS TRIGGER AS $$\nBEGIN\n    NEW.updated_at = NOW();\n    RETURN NEW;\nEND;\n$$ language 'plpgsql';\n\n-- Apply updated_at triggers\nCREATE TRIGGER update_trading_bots_updated_at BEFORE UPDATE ON trading_bots\n    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\n\nCREATE TRIGGER update_opportunities_updated_at BEFORE UPDATE ON opportunities\n    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\n\nCREATE TRIGGER update_user_wallets_updated_at BEFORE UPDATE ON user_wallets\n    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();\n\nCREATE TRIGGER update_user_settings_updated_at BEFORE UPDATE ON user_settings\n    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();